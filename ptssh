#!/usr/bin/env python
# -*- coding: utf-8 -*-

#Copyright (c) 2013, Jay Edwards
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



import argparse
import os
import subprocess
import sys

from os.path import expanduser, splitext


def disable(args):
    confdir, file = args.config, args.file
    name, ext = splitext("%s/%s" % (confdir, file))
    
    if not os.path.exists("%s/%s" % (confdir, file)):
        sys.stderr.write("%s doesn't exist\n" % name)
        sys.exit()

    if ext == ".disabled":
        print >> sys.stderr, "%s is already disabled" % file
        sys.exit()
    else:
        src = "%s/%s" % (confdir, file)
        dest = "%s.disabled" % src
        os.rename(src, dest)
        sys.stdout.write("Disabled %s\n" % file)


def enable(args):
    """This is mildly a PITA because I allow people to use either the full filename or just the "key" name -- so a currently diabled file "mykey.disabled" can be submitted as either "mykey" or "mykey.disbaled" """

    confdir, file = args.config, args.file
    name, ext = splitext("%s/%s" % (confdir, file))

    if ext != ".disabled" and os.path.exists("%s/%s.disabled" % (confdir, file)):
        src = "%s/%s.disabled" % (confdir, file)
    elif ext == ".disabled" and os.path.exists("%s/%s" % (confdir, file)): 
        src = "%s/%s" % (confdir, file)
    else:    
        print >> sys.stderr, "%s is already enabled or doesn't exist" % file
        sys.exit()
    dest = name
    os.rename(src, dest)
    sys.stdout.write("Enabled %s\n" % file)


def inventory(args):
    print os.listdir(args.config)
    # Don't want to regen ssh_config
    sys.exit()


def main():
    parser = argparse.ArgumentParser(prog='ptssh', description='Enable/disable ssh config fragments for poet', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-c', '--config', help='config.d directory managed by poet', default="%s/.ssh/config.d" % expanduser("~"))
    parser.add_argument('-r', '--run', action='store_false', help='Run poet after taking action?', default=True)

    subparsers = parser.add_subparsers()
    parser_enable = subparsers.add_parser('enable', help='Enable an ssh config fragment')
    parser_enable.add_argument('-f', '--file', type=str, help='filename to enable')
    parser_enable.set_defaults(func=enable)

    parser_disable = subparsers.add_parser('disable', help='Disable an ssh config fragment')
    parser_disable.add_argument('-f', '--file', type=str, help='filename to disable')
    parser_disable.set_defaults(func=disable)

    parser_inventory = subparsers.add_parser('inventory', help='Show ssh fragment statuses')
    parser_inventory.set_defaults(func=inventory)
    
    args = parser.parse_args()
    args.func(args)

    if args.run:
        subprocess.call(["poet", "--dir", args.config])


if __name__ == "__main__":
    main()

